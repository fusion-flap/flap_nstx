#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Aug 26 13:51:18 2022

@author: mlampert
"""
# -*- coding: utf-8 -*-
import matplotlib.pyplot as plt
from matplotlib.patches import Ellipse
import numpy as np

RAD = 180. / np.pi
DEGREE = 1. / RAD

def rot( a ):
    """
    simple rotation matrix in 2D
    """
    return np.array(
        [ [ +np.cos( a ), -np.sin( a ) ],
          [ +np.sin( a ), +np.cos( a ) ] ]
    )

def fit_ellipse( x, y ):
    """
    main fit from the original publication:
    http://nicky.vanforeest.com/misc/fitEllipse/fitEllipse.html
    """
    x = x[ :, np.newaxis ]
    y = y[ :, np.newaxis ]
    D =  np.hstack( ( x * x, x * y, y * y, x, y, np.ones_like( x ) ) )
    S = np.dot( D.T, D )
    C = np.zeros( [ 6, 6 ] )
    C[ 0, 2 ] = +2
    C[ 2, 0 ] = +2
    C[ 1, 1 ] = -1
    E, V =  np.linalg.eig( np.dot( np.linalg.inv( S ), C ) )
    n = np.argmax( np.abs( E ) )
    a = V[ :, n ]
    return a

def ell_parameters( a ):
    """
    New function substituting the original 3 functions for
    axis, centre and angle.
    We start by noting that the linear term is due to an offset.
    Getting rid of it is equivalent to find the offset.
    Starting with the Eq.
    xT A x + bT x + c = 0 and transforming x -> x - t
    we get a new linear term. By demanding that this term vanishes
    we get the Eq.
    b = (AT + A ) t.
    Hence, an easy way to write down how to get t
    """
    A = np.array( [ [ a[0], a[1]/2. ], [ a[1]/2., a[2] ] ] )
    b = np.array( [ a[3], a[4] ] )
    t = np.dot( np.linalg.inv( np.transpose( A ) + A ), b )

    c = a[5]
    cnew =  c - np.dot( t, b ) + np.dot( t, np.dot( A, t ) )
    Anew = A / (-cnew)

    E, V = np.linalg.eig( Anew )

    # ~B = np.dot( np.transpose(V), np.dot( Anew, V ) ) ### debug only
    phi = np.arccos( V[ 0, 0 ] )

    if V[ 0, 1 ] < 0:
        phi = 2 * np.pi - phi
    ### cw vs ccw and periodicity of pi
    phi = -phi % np.pi
    return np.sqrt( 1. / E ), phi * RAD, -t


"""
creating some test data
"""
xl = np.linspace(-3,2.5, 10)
yl = np.fromiter( (2.0 * np.sqrt( 1 - ( x / 3. )**2 ) for x in xl ), np.float )
xl = np.append(xl,-xl)
yl = np.append(yl,-yl)
R = rot( -103.01 * DEGREE ) ### check different angles
# ~R = rot( 153 * DEGREE ) results in singular matrix !!!...strange
xyrot = np.array( [ np.dot(R, [ x, y ] )for x, y  in zip( xl, yl ) ] )
xl = xyrot[:,0] + 7
yl = xyrot[:,1] + 16.4

points = np.asarray([( 0 , 3),
        ( 1 , 2),
        ( 1 , 7),
        ( 2 , 2),
        ( 2 , 4),
        ( 2 , 5),
        ( 2 , 6),
        ( 2 ,14),
        ( 3 , 4),
        ( 4 , 4),
        ( 5 , 5),
        ( 5 ,14),
        ( 6 , 4),
        ( 7 , 3),
        ( 7 , 7),
        ( 8 ,10),
        ( 9 , 1),
        ( 9 , 8),
        ( 9 , 9),
        (10,  1),
        (10,  2),
        (10 ,12),
        (11 , 0),
        (11 , 7),
        (12 , 7),
        (12 ,11),
        (12 ,12),
        (13 , 6),
        (13 , 8),
        (13 ,12),
        (14 , 4),
        (14 , 5),
        (14 ,10),
        (14 ,13)])

xl=points[:,0]
yl=points[:,1]

xl = np.array([40.5, 40.5, 40.5, 40.5, 40.5, 40.5, 40.5, 40.5, 40.5, 40.5, 40.5,
               40.5, 41.5, 41.5, 41.5, 41.5, 41.5, 41.5, 41.5, 41.5, 41.5, 42.5,
               42.5, 42.5, 42.5, 42.5, 42.5, 42.5, 42.5, 42.5, 42.5, 43.5, 43.5,
               43.5, 43.5, 43.5, 43.5, 44.5, 44.5, 44.5, 44.5, 44.5, 44.5, 44.5,
               44.5, 45.5, 45.5, 45.5, 45.5, 45.5, 46.5, 46.5, 46.5, 46.5, 46.5,
               46.5, 47.5, 47.5, 47.5, 47.5, 47.5, 47.5, 47.5, 48.5, 48.5, 48.5,
               48.5, 49.5, 49.5, 49.5, 50.5, 50.5, 50.5, 50.5, 51.5, 51.5, 51.5,
               51.5, 52.5, 52.5, 52.5, 52.5, 52.5, 53.5, 53.5, 53.5, 53.5, 53.5,
               53.5, 54.5, 54.5, 54.5, 54.5, 54.5, 54.5, 55.5, 55.5, 55.5, 55.5,
               55.5, 55.5, 55.5, 55.5, 56.5, 56.5, 56.5, 56.5, 56.5, 57.5, 57.5,
               57.5, 57.5, 58.5, 58.5, 58.5, 58.5, 58.5, 58.5, 59.5, 59.5, 59.5,
               59.5, 59.5, 60.5, 60.5, 60.5, 60.5, 60.5, 60.5, 60.5, 60.5, 60.5,
               60.5, 60.5, 60.5, 60.5, 60.5, 60.5, 61.5])
yl = np.array([42.5, 43.5, 46.5, 48.5, 49.5, 50.5, 51.5, 52.5, 54.5, 56.5, 57.5,
               60.5, 41.5, 44.5, 45.5, 47.5, 53.5, 55.5, 57.5, 59.5, 60.5, 33.5,
               37.5, 38.5, 39.5, 40.5, 58.5, 60.5, 62.5, 63.5, 64.5, 32.5, 34.5,
               35.5, 36.5, 61.5, 64.5, 28.5, 29.5, 31.5, 65.5, 66.5, 67.5, 68.5,
               71.5, 27.5, 30.5, 69.5, 70.5, 72.5, 24.5, 25.5, 26.5, 73.5, 74.5,
               75.5, 20.5, 21.5, 22.5, 23.5, 76.5, 78.5, 79.5, 18.5, 19.5, 77.5,
               79.5, 16.5, 17.5, 80.5, 16.5, 17.5, 81.5, 82.5, 18.5, 79.5, 80.5,
               81.5, 19.5, 20.5, 21.5, 23.5, 78.5, 22.5, 24.5, 25.5, 75.5, 76.5,
               77.5, 24.5, 26.5, 27.5, 28.5, 73.5, 74.5, 29.5, 30.5, 31.5, 32.5,
               69.5, 70.5, 71.5, 72.5, 33.5, 65.5, 66.5, 67.5, 68.5, 34.5, 35.5,
               36.5, 64.5, 37.5, 38.5, 59.5, 60.5, 61.5, 63.5, 39.5, 41.5, 57.5,
               58.5, 62.5, 40.5, 42.5, 43.5, 44.5, 45.5, 46.5, 47.5, 48.5, 49.5,
               51.5, 52.5, 53.5, 54.5, 55.5, 56.5, 50.5])

xl = np.array([25.5, 25.5, 25.5, 26.5, 26.5, 26.5, 26.5, 27.5, 27.5, 27.5, 27.5,
               28.5, 28.5, 29.5, 29.5, 30.5, 30.5, 31.5, 31.5, 32.5, 32.5, 33.5,
               33.5, 34.5, 34.5, 35.5, 35.5, 36.5, 36.5, 37.5, 37.5, 38.5, 38.5,
               39.5, 39.5, 40.5, 40.5, 41.5, 41.5, 42.5, 42.5, 43.5, 43.5, 44.5,
               44.5, 45.5, 45.5, 46.5, 46.5, 47.5, 47.5, 48.5, 48.5, 49.5, 49.5,
               49.5, 50.5, 50.5, 51.5, 51.5, 52.5, 52.5, 53.5, 53.5, 54.5, 54.5,
               55.5, 55.5, 56.5, 56.5, 57.5, 57.5, 58.5, 58.5, 59.5, 59.5, 60.5,
               60.5, 61.5, 61.5, 62.5, 62.5, 62.5, 63.5, 63.5, 64.5, 64.5, 65.5,
               65.5, 66.5, 66.5, 66.5, 66.5, 67.5, 67.5, 67.5, 68.5, 68.5, 68.5,
               69.5, 69.5, 70.5, 70.5, 70.5, 71.5, 71.5, 71.5, 71.5, 71.5, 71.5,
               72.5, 72.5])
yl = np.array([54.5, 55.5, 57.5, 50.5, 53.5, 56.5, 58.5, 50.5, 51.5, 52.5, 58.5,
               49.5, 58.5, 48.5, 58.5, 48.5, 59.5, 47.5, 60.5, 46.5, 61.5, 45.5,
               61.5, 44.5, 60.5, 44.5, 60.5, 43.5, 61.5, 42.5, 60.5, 42.5, 60.5,
               42.5, 61.5, 41.5, 61.5, 40.5, 61.5, 40.5, 61.5, 39.5, 61.5, 39.5,
               61.5, 39.5, 62.5, 38.5, 61.5, 38.5, 61.5, 38.5, 61.5, 37.5, 61.5,
               62.5, 37.5, 60.5, 37.5, 61.5, 38.5, 60.5, 37.5, 60.5, 37.5, 60.5,
               37.5, 60.5, 37.5, 59.5, 37.5, 59.5, 36.5, 58.5, 37.5, 57.5, 36.5,
               58.5, 37.5, 57.5, 36.5, 37.5, 56.5, 38.5, 55.5, 38.5, 55.5, 37.5,
               54.5, 38.5, 39.5, 53.5, 54.5, 38.5, 40.5, 52.5, 39.5, 40.5, 52.5,
               41.5, 51.5, 40.5, 49.5, 50.5, 41.5, 42.5, 43.5, 44.5, 47.5, 48.5,
               45.5, 46.5])

"""
fitting
"""
avec = fit_ellipse( xl, yl )
(a, b), phi, t = ell_parameters( avec )

ell = Ellipse(
    t, 2 * a, 2 * b, phi,
    facecolor=( 1, 0, 0, 0.2 ), edgecolor=( 0, 0, 0, 0.5 )
)

"""
plotting
"""
fig = plt.figure()
ax = fig.add_subplot( 1, 1, 1 )
ax.add_patch( ell )
ax.scatter( xl ,yl )
plt.show()